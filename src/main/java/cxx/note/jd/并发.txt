							并发编程

内存模型：

程序在执行时，为了提高CPU加载数据的速度，会将需要的数据从主存复制一份副本到
高速缓存中（每个CPU都有自己的高速缓存），CPU对数据的操作实际上是在高速缓存上操作，计算完毕后再从高速缓存刷到主存中，这就可能导致了不同CPU缓存不一致的问题（同时对共享变量进行操作）。

解决方法：1.通过在总线加LOCK#锁的方式（缺点是效率低）
		  2.通过缓存一致性协议（如Intel的MESI）：当CPU操作数据时发现该变量是共享的，就会向其他CPU发出信号将该变量置为无效，其他CPU在使用到该变量时就会重新去主存中获取，会等待发信号的CPU刷到主存后再获取。


并发编程会遇到的三个问题：1.原子性 2.可见性 3.有序性
要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。