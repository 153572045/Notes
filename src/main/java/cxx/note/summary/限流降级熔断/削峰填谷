
一、秒杀场景

特点：在同一时间点有大量流量打到服务器，这些流量高度集中于某一个时间点，需要用有限的资源去处理巨大的流量。需要做的主要有两块，一块是针对流量入口的处理，
另一个可能是对服务器的处理进行优化。

采取措施： 我先讲一下我们组所负责的系统在大流量情况下的一些应对措施，一个是我们这边的系统可能是相对下游的系统了，所以实际上打到我们这边的流量已经是
经过限流过的，或者经过削峰填谷处理过的，所以我们这边采取的措施主要有两种，一种是降级，还有就是限流了，降级我们主要是降召回商品的数量，降排序模型的复杂
程度，限流就是使用了基于令牌桶的RateLimiter去做。

如何应对秒杀场景：
在流量入口处：
1、削峰填谷：目的就是将集中在同一时间点的请求分摊到更大的时间区间内去做处理，避免忙的时候处理不过来，闲的时候没处理任务，也不能说直接就限流，超出的部
分直接拒绝访问，能采取的措施有：
(1)、分流，就是可能会加一些验证码验证啊，加购物车等一些操作吧，这样的话可能可以把集中在1秒内的情况分摊到2-10秒之间。
(2)、排队，用MQ来缓冲瞬时流量，把同步的直接调用转换成异步的间接推送，中间通过一个队列来承接瞬时流量，在另一端平滑地将消息推送出去。
(3)、分层过滤，相对于无差别地限流，可以采用分层过滤掉一些无效请求的措施，比如说在上游充分利用缓冲兜住请求，尽量不要往后面打，可以对读请求不做强一致校
验，对写请求基于时间分片过滤掉无效请求。


服务端的优化
目的就是尽可能地去减少每次请求的处理时间，提高吞吐量
分析系统的瓶颈，对缓存系统而言，可能瓶颈是内存，其他的可能是CUP，我们通过压测，把QPS压到极限来观察CUP是不是接近100%了，如果不是的话，瓶颈可能是一些
本地的IO，因为IO涉及到序列化，需要编码，而编码一般是比较耗时的。
我们可以通过一些诊断工具来协助分析，比如说火焰图，观察哪些函数的CUP耗时比较多，以便有针对性的进行优化，