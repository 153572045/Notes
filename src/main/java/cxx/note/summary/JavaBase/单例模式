
一、单例模式的特点
1、单例类只能有一个实例
2、单例类必须自己创建自己唯一的实例
3、单例类必须给所有其他对象提供这一个实例

二、单例模式的优缺点
优点：节约系统资源，减少性能开销
缺点：单例类的职责较重，不利于扩展

三、单例的实现方式

1、饿汉模式
public class Single {
    private static Single single = new Single();
    private Single()  {}
    public static Single getSingle() {
        return single;
    }
}
特点：在类加载时就创建单例对象，是一种以空间换时间的方式
     优点是避免多线程的问题，性能高

2、懒汉模式--双重检查锁
public class Single {
    private volatile static Single single;
    private Single() {}
    public static Single getSingle() {
        if(single == null) {
            synchronized(Single.class) {
                if(single == null) {
                    single = new Single();
                }
            }
        }
        return single;
    }
}

3、静态内部类
public class Single {
    private static class Inner {
        private final static Single INSTANCE = new Single();
    }
    private Single() {}
    public static Single getSingle() {
        return Inner.INSTANCE;
    }
}
1. 利用了classloader机制来保证初始化 instance 时只有一个线程，线程安全；
2. 只有通过显式调用 getInstance 方法时，才会显式装载静态内部类，从而实例化instance，延迟加载。

4、枚举
public enum SingletonEnum {
    INSTANCE;
}
枚举：这是实现单例模式的最佳方法。它更简洁，不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对
象，绝对防止多次实例化。但是不是延迟加载的。