
虚拟机的参数
1、  -Xms 堆内存的初始大小
2、  -Xmx 堆的最大大小   -Xmn 年轻代大小
3、-XX:+HeapDumpOnOutOfMemoryError
-XX:HeapDumpPath=D：\jvm.dump  (后加路径)   在程序快要内存溢出的时候输出堆快照文件
4、-XX:+UseG1GC 使用G1收集器
5、-XX:ParallelGCThreads=10  jvm在进行并行GC的时候，用于GC的线程数
6、-XX:MaxGCPauseMillis=350  每次GC的最大停顿毫秒数  相应-XX:GCTimeRatio=nnn  比例
https://blog.csdn.net/wwwvipp/article/details/122487925  G1调优参数
7、-XX：+PrintGCdetails   输出GC的日志

JVM调优：主要优化GC，即FGC，FGC不出现，OOM基本不会出现

------------------------------------------------------------------------------------------------------------------------
jps  查看jvm进程的id

一、Jmap  内存映像工具  可以用来生成堆快照文件
1、jmap -histo 进程号  直接看堆的对象信息
2、jmap -histo 进程号 > ./log.txt   在当前目录下生成堆的对象信息文件
3、jmap -heap 进程号   查看堆的内存使用情况和配置信息  包括了新生代和老年代的内存使用情况
4、jmap -dump:formap=b，file=eureka.hprof 进程号   在当前目录导出堆的快照文件，用可视化工具进行分析(如visualVM)  其实要分析的数据和jmap -histo差不多
可以在堆块发生内存溢出的时候自动导出快照文件，具体的配置为
-XX:+HeapDumpOnOutOfMemoryError
-XX:HeapDumpPath=D：\jvm.dump  (后加路径)  线上应用程序很多都会用这个
调优：jmap可以帮忙找到导致内存飙升的原因，找到哪些对象比较多，然后定位到类的代码去检查
内存飙升怎么处理
先检查一下系统内是否有大量的类对象生成，用jmap工具进行检查
------------------------------------------------------------------------------------------------------------------------
二、jstack  堆栈跟踪工具  用于生成虚拟机当前的线程快照

jstack 进程号   打印出来的信息有
各个线程名，优先级  tid,nid,状态等
tid 线程id  java生成的id
nid 操作系统内线程的唯一标识

注：一般Runnable可能正常，waiting不一定正常  但是blocked可能有点小问题，是排查的目标
如果程序有死锁，jstack生成的信息中有死锁的信息和造成死锁的地方（即堆栈信息）   用visualVM也可以找到死锁

linux的top命令：linux的性能分析工具，可以实时显示系统中各个进程的资源占用情况，如CPU和内存
top -p 进程号  可以显示java进程的内存情况，进程号是java进程号  只能在linux中使用，之后按H 就可以看该进程内的所有线程的资源使用情况
top看到的线程id对应nid

如何找到导致CUP飙升的问题

1、top查看哪个进程的CUP高  然后用top -p 进程号命令  然后按H 就可以看到这个进程下的各个线程，可以看到CPU高的线程
2、将该线程转成16进制
3、jstack工具，查看这个线程的栈信息，即正在运行的方法
具体可以调用  jstack 进程号|grep -A 10 线程号(16进制的nid)
grep解析  搜索文件中有进程号的行，并且列出后10行
------------------------------------------------------------------------------------------------------------------------
三、Jinfo
jinfo -flags 进程号  查看jvm参数
jinfo -sysprops 进程号  查看java系统参数
------------------------------------------------------------------------------------------------------------------------
四、Jstat  可以查看堆内存各部分的使用量。以及加载类的数量
jstat -gc 进程号  单位是KB
 S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU      YGC     YGCT    FGC    FGCT    GCT
幸存区1        幸存区1          伊甸区    伊甸区      老年代      已经用    元空间(方法区)   从启动    总耗时               FGC和YGC之和
当前的总大小    正在使用的大小   现有容量    已使用容量   总大小      大小     总大小  已用大小  到现在次数

jstat -gc 进程号 时间间隔  次数   每隔一段时间执行一个jstat -gc命令  可以用来观察各内存区和gc变动的情况
如：jstat -gc 1234  1000 10  每隔一秒执行一次  总共执行10次

Jstat是优化的主要工具   具体看Jstat调优
