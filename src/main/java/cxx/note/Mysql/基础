
常用指令
1、show create database <name>;  查看数据库创建时的sql  字符集默认是utf8的一个子集，表默认和数据库的字符集相同，但可以修改
2、use <dbName> 切换数据库
------------------------------------------------------------------------------------------------------------------------
DDL
1、create database <name>;  创建数据库
2、alter database <name> character set utf8;
3、drop database <name>; 删除数据库   drop database if exists <name>;
4、create table students( id char(8) not null unique,
                          name varchar(20) not null,
                          gender char(2) not null,
                          age int not null unique,
                          qq varchar(11) unique)
char和varchar可以指定最大长度 如  varchar(20) 最大是20个字符长度
5、desc table <tableName> 查看表结构
6、drop table (if exists) <tableName> 删除数据表
7、alter table <tableName> rename to stus;  修改表的名字
8、alter table <tableName> character set utf8; 修改表的字符集，默认和数据库的字符集一致
9、alter table <tableName> add 列名 类型；  添加列
10、alter table <tableName> change 列名 新列名 新类型等...；  修改列的结构或名字，应该是重定义列
11、alter table <tableName> modify 列名 新类型   修改字段的类型
12、alter table <tableName> drop 列名   删除列
------------------------------------------------------------------------------------------------------------------------
数据类型--大致有三类
1、数值类型
tinyint 1byte  特小整形 -128-127或0-255
smallint 2bytes 小整形 -32768-32767 或 0 - 65535
mediumint 3bytes 中整形
int/integer 4bytes 整形  默认整形，更小的整形比较少使用，int不够再用bigint
bigint  8bytes 大整形
float   4bytes 单精度
double  8bytes 双精度  默认浮点类型
decimal 等研究
decimal的使用  decimal(10,2) 总共有10位，小数位有2位

2、字符串类型
char 0-255字节   定长字符串，最多可以存储255个字节 定义类型的时候 如  id char(10) 表示最多可以存放10个字节，不够10个用特殊字符补齐10个
varchar 0-65535字节 可变字符串  此类型的列最大长度位65535字节   name varchar(20) 名字最大为20个字符(1个汉字2个字符)
tinyblob 0-255字节 存储二进制字符串    不常用
blob  0-65535字节 存储二进制字符串     图片 视频转为二进制存储  一般不放在数据库，而是放在服务器上，而数据库存放路径
mediumblob 更大字节  也是存储二进制字符串
longblob  更大字节 也是存储二进制字符串
tinytext    0-255字节   文本数据(字符串，和char比 这个是可变长的,只存储实际数据 不作补齐？)
text
mediumtext
longtext
用的比较多的也就char varchar  varchar放不下就会用longtext,而其他类型基本不会使用


3、日期类型
也可以用字符串的形式来存储日期，但是在做时间范围内的查找时，不便用来作比较

date  2022-07-06   日期，只能存储年月日
time  11:10:13     时间，只能存储时分秒
year  2022         年份
datatime 2022-07-06 11:12:13  8个字节   日期+时间  用得最多的类型  在插入数据时，可以用''修饰
timestamp  20220706111213  4个字节    日期+时间  时间戳 具备时区转换功能
timestamp存储的是一个Int类型，所以有范围限制，大概是1970-2038，而且存储的时候会将客户端插入的数据按照当前的时区转成UTC(世界标准时间)再存储，
获取的时候反过来操作，因此会性能没有datetime好，特别是在高并发的时候，会涉及到锁，导致上下文切换频繁，cup使用率暴涨。因此不存在时区转换的情况下
建议使用datetime.
怎么选？  个人的想法是  如果不是高并发场景，可以用timestamp 省空间，当然有时区转换的需求肯定也用timestamp，如果是高并发场景，用datetime类型
------------------------------------------------------------------------------------------------------------------------
约束
1、非空约束：列的值必须提供，不能为null
2、唯一约束: 表中此列的值不能重复，没有语义作用  可以为空
3、主键约束：非空+唯一，语义上能够唯一标识一条记录
自动增长主键:在定义table时,在字段后面加上auto_increment
联合主键:在定义table时在最后加个primary key(列1,列2)---用的很少,因为当一个数据表中没有合适的列可以作为主键的时候,可以额外添加一个自增长的id列
https://blog.csdn.net/weixin_47600880/article/details/122273377  建议使用自增列的原因
4、外键约束：用来建立不同表之间的关联关系   不推荐使用外键的原因 https://www.cnblogs.com/wangguanjia/p/16243234.html
外键必须是另一张表的主键或唯一列，添加外键数据时，该数据必须存在于另一张表
创建外键基本语法：
1、constraint 外键名 foreign key(本表列名) reference 引用表名(列名)   在创建表时使用
2、alter table tableName add constraint 外键名 foreign key(本表列名) references 引用表名(列名)  在创建表后使用，但需保证外键列没数据
当一个表中某条数据被其他表以外键进行引用，则相应的值无法进行修改或删除，如果要改的话要以以下的步骤去修改
1、将当前表中的外键相应的值先设置为Null
2、将引用表外键列中相应的值更新
3、将当前表中null的记录改回来
级联修改和删除： 可以不以上面繁琐的方式修改，直接在引用表修改，则使用外键的表会做相应的更新或删除
在添加外键时加上  ON UPDATE CASCADE ON DELETE CASCADE
alter table tableName add constraint 外键名 foreign key(本表列名) references 引用表名(列名) ON UPDATE CASCADE ON DELETE CASCADE
删除外键：alter table tableName drop foreign key 外键名;

------------------------------------------------------------------------------------------------------------------------
DML
用于完成对数据表中数据的插入、删除、修改操作
1、插入数据
insert into <tableName>(colName,...) values(value,...)   (不允许为空的列必须提供数据)
数据顺序可以和表中不一致,但colName和value顺序必须一致
insert into <tableName> values()   这个语句必须给所有值提供数据,且顺序和表中的列顺序一致,不过在开发中,最好还是不省略colName列表
2、删除数据
delete from <tableName> where conditions;
delete from <tableName>  全部数据删除
3、修改数据
updata <tableName> set colName1=value,colName2=value where conditions;  如果不加where 则全部列都修改
------------------------------------------------------------------------------------------------------------------------
DQL
1、单表查询
2、多表联合查询
基本语法
selete [colName,.../*] from tableName;
selete [colName,.../*] from tableName where conditions;  条件有=、!=(<>)、>、<、>=、<=、 区间查询用between value1 and value2,闭区间
between前面可以用not取反
多条件查询，用逻辑运算符将多个条件连起来，逻辑运算符有and(同时满足) or(满足其中一个) not(不满足)

模糊查询  like
selete [colName,.../*] from tableName where colName like 'reg'  'reg'是一个表达式 比如可以'%o%'
%表示任意多个字符，0个也行，%o%表示只要字段中包含o就行
_表示任意一个字符，比如‘_o%’,则o前面必须要有一个字符，__o%则两个
示例：1、'%o%'只要包含o即可，2、‘o%’，第一个字符必须是o，3、’%o‘，最后一个字符为o，4、'_o%',第二个字符为o的字符

计算列
对某列进行一些计算后再显示出来,比如可以用年龄计算出出生年份
select 2022-age from stus;
可以给查询结果的列取别名，select 2022-age as 出生年份 from stus;

消除重复行:distinct(在字段前)

排序:order by
单字段
selete * from tableName where conditions order by colName asc|desc; 默认是升序排序
多字段，先满足第一个排序规则，当第一个列值相等再按照第二个排序规则
selete * from tableName where conditions order by colName1 desc,colName2 asc 先按照字段1降序排序，再按照字段2升序排序

聚合函数
1、count():selete count(colName) from tableName where conditions;  可以不给条件则全部列都统计
2、max(): selete max(colName) from tableName where conditions;
3、min()
4、sum()
5、avg()

日期函数
now()  给出当前日期的函数，直接在insert语句中使用即可
sysdate()  功能一样
selete now()  可以检查当前时间

字符串函数：通过sql指令对字符串进行处理
1、concat(...)将多个字符串连接起来,参数可以是列名也可以是字面值，用,隔开
select concat('ac','bc');
2、upper(column)
3、lower(column)
4、substring(column,n,m)  从第n个字符开始截m个字符

分组查询
select * from tableName group by colName;  分组后取第一条记录，所以用*号通常是没啥意义
一般情况下，select后面的字段应该是分组字段，并且在后面加一个聚合函数列，如：select gender,count(stu_num) from stus group by gender;
完整语法：select 分组字段/聚合函数 from 表名 [where条件] group by 分组列名 [having条件] [order by 排序字段]
1、先根据where条件从数据库查询记录。2、对查询的记录进行分组。3、执行having对分组后的数据进行筛选。

分页查询
selete ...... limit param1 param2   第一个参数表示第一条记录的下标，第二个表示个数
通用表达式：selete * from tableName [where] limit (pageNum - 1)*pageSize, pageSize

连接查询:join
1、内连接  inner join  即笛卡尔积
两种方式
(1) 使用where 则做笛卡尔积再筛选  selete * from students inner join classes where students.cid = classes.class_id;
(2) 使用on 先判断条件是否成立，成立再进行连接  效率较高 selete * from students inner join classes on students.cid = classes.id;
特点：结果只获取两张表中匹配条件成立的数据，任何一张表在另一张表中如果没有找到对应匹配则不会出现在查询结果中
2、左连接或右连接
左连接：显示左表的所有数据，如果在右表中存在与左表记录满足匹配条件的数据，则进行匹配；如果右表中不存在匹配数据，则显示为null
右连接：与左连接相反，显示右表中的所有记录

数据表别名：
例子：
selete s.*,c.name   //表示取s表的所有字段和c表的name字段
from students s
inner join classes c
on s.cid = c.id;

子查询/嵌套查询
概念：先进行一次查询，第一次查询的结果作为第二次查询的源或条件，即第二次查询是基于第一次查询来进行的
字句用()包起来
若子查询的结果有多个，则条件应该用in或not in，如果只有一个才用=、!=
子查询的结果如果是一张表，可以当成虚拟表使用：
selete * from(selete * from student where cid = 1) t where t.stu_gender='男';

union关键字：将多个查询语句的结果在垂直方向上拼接在一起

索引失效的情况
1、使用like后面紧跟着%，如‘%XXX’
2、表中数据量较少时，不会走索引，而是全表查询
3、有类型转换时索引失效
4、where中索引列使用了函数
5、where中索引列有运算
6、is null可以走索引，is not null无法使用索引
7、复合索引没有用到左列字段
8、字符串不加单引号索引会失效
9、条件中有or，即使其中有条件带索引也不会使用(这也是为什么尽量少用or的原因)。要想使用or，又想让索引生效，只能将or条件中的每个列都加上索引

死锁排查
查看死锁日志show engine innodb status;
找出死锁Sql
分析sql加锁情况
模拟死锁案发
分析死锁日志
分析死锁结果

