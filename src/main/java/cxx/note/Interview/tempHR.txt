
企微代理网关
之前我们这边的办公平台是微软的teams，后面开通了企业微信，相应的就有一些部门想在企业微信上做一些开发，这些开发需要去调企微官方的接口，要调这些接口需
要做鉴权，具体方式是先到公司的企微管理后台拿到应用的唯一标识，再用这个标识去调接口获取一个access_token，最后才能去调具体的接口，所以之前只要有部
门需要去调这些企微官方接口，我们都会直接把这些唯一标识给他们，他们自己去调，这也意味着他们有了这个标识后可以去调任意接口，安全性是比较差的，毕竟
有一些接口是可以修改公司的人员信息，查看聊天记录等。

所以我们为了做限制就在企微和应用之间做了一层代理网关，目的是对这些企微接口的调用权限做细粒化控制，也就是说现在应用想要调企微接口，都需要经过这层网关，
这样我们就可以在网关层做鉴权处理，他们想要调用某个接口前，需要先提单申请，审批通过后将权限映射关系记录到数据库里面，网关在收到请求后会先根据请求的信
息去数据库里面查找对应的权限，只有有权限的情况下才能进行透传，实现了按需分配具体接口调用权限的功能，而且我们也可以很方便通过这层网关去对这些调用行为
做监控，对一些敏感接口做纪录，方便后续追责。
同时也提供了一些消息订阅服务和分发功能

运维自动化平台
这是一个比较大的平台，我在里面主要是做了运维工单处理、通知中心和数据分析等模块，运维工单就是我们平时要发布变更就需要提变更单，有事故就要提Incident
事故单，然后由相关的领导或者应用团队去处理，也有一些工单是自动化处理，其实这些工作流的功能（一些现成的项目管理工具就能做 jira）就能做，但是我们领导
觉得jira用起来不够方便，所以这个模块是在jira的基础上做了一些二次开发，增加了一键拉会、告警、数据分析等额外功能。  通知中心就是一个通知服务，我们提供了
邮件，企微，电话等通知方式，还有自己的运维平台也有公告等通知方式


------------------------------------------------------------------------------------------------------------------------
推荐系统中的调度引擎，它的作用是将召回，粗排，精排和重排等流程串起来 构成一条完整的推荐链路

像推荐这种比较复杂的任务流的处理场景，一般会用任务处理管道来做实现，一条处理管道由各个节点构成，请求进入管道后会依次被各个节点处理，这种模式的好
处在于节点之间的解耦度比较高，管道可以进行插拔式地拓展，想增加业务逻辑，只需要在管道相应的位置上增加新的业务节点就行，而且代码的可
用复用性非常高，很多通用节点可以被不同推荐位复用。 而树引擎或图引擎，就是以树或图的形式来组织节点的处理管道，它们可以以更加灵活、高效
的方式去编排各个节点，不仅可以控制节点之间的执行顺序，还可以控制它们的执行方式，比如并发执行或串行执行，提高整条任务管道的并发度，让计算快速完成
------------------------------------------------------------------------------------------------------------------------
工作任务

1、每个人都会负责部分推荐位的开发和维护，我主要负责主站商详、七鲜和泰国站一些推荐位

2、架构重构，算子迁移，当时我们正好处在系统重构的阶段，就是树引擎到图引擎的重构，这个图引擎是我们那的架构师提出来的，他是C++背景，就给我们提供了一些
C++相关的资料，我们在这个基础上用java把系统搭起来，我当时主要负责系统一些基础设施的重构，比如图对象生命周期管理(也就是池化)，rpc,因为我们旧系统很多
调用方式还是使用Http， 还有就是算子迁移了，就是将业务算子从旧系统迁到新系统，根据新的架构特性去重构，我主要负责召回、过滤和部分取数模块的算子迁移，
因为新系统的数据流处理方式和旧系统都有比较大的区别，而且旧系统算子冗余严重，在迁移的时候要考虑各种复用性，最大化去降低算子的种类。
迁移后还要做diff，保证同一个请求走新系统和旧系统都能得到一样的结果。

算子重构概括起来就是 1、梳理业务  2、对业务进行分类重抽象，为了降低算子的冗余度，对于旧系统的算子
我都会尽量去做合并，比较常用的方式是通过策略模式去封装各种场景算法，这样可以减少不少冗余算子，还有更多会参照新系统的特性去重构吧，比如过滤模块，在
树引擎上是每个过滤逻辑都是一个单独的算子节点，因为每个推荐位基本都有十几二十个过滤逻辑，处理管道上的节点会比较膨胀，在新系统上，我只写了一个过滤算
子，具体的过滤逻辑再封装到非算子的业务类中，然后通过属性聚合的方式关联起来，初始化过滤算子的时候根据具体的配置需要去加载，这样会大大减少了一个处
理管道上的节点数，对开发和维护效率都有提升

3、优化
启动优化， 序列化优化，数据结构调整           IO密集型系统  大数据量场景 使用Thrift序列化方案