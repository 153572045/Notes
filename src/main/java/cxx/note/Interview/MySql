
：一个完整的业务逻辑
只有DML语句才和有关  其他都没关系

实现原理：innoDB引擎提供了一组用来记录事务性活动的日志文件
事务开启后，所有DML语句都会被记录到日志文件中，之后我们可以提交，也可以回滚(我理解在这期间只是对本地内存中的数据做修改)
提交事务后将数据全部持久化到数据库表中，日志文件的事务性活动也被清除了  提交事务标志着事务的成功结束
回滚也会清空事务性活动日志，但是会将之前的DML操作全部撤销，回滚事务标志着事务的失败结束

mysql在默认的情况下，事务是自动提交的，也就是说执行一条语句就提交一次
不自动提交则需要执行命令  start transaction（关闭自动提交事务）
start transaction后  执行命令未提交，在本地也能查到，回滚后就查不到了。


事务的特性
ACID
原子性：指事务中的语句要么全执行，要么全不执行，就是说事务是一个最小的工作单元，是一个完整的业务逻辑。
持久性：保证事务提交后不会因为宕机等原因导致数据丢失；实现主要基于redo log
隔离性：保证事务执行尽可能不受其他事务影响；InnoDB默认的隔离级别是可重复度
一致性：事务追求的最终目标，一致性的实现既需要数据库层面的保障，也需要应用层面的保障


四种隔离级别

1、Read Uncommitted（读取未提交内容）：因为未提交就能被读取到，所以可能出现脏读
2、Read Committed（读取提交内容）  大部分数据库的默认隔离级别，问题是不可重复读
3、Repeatable Read（可重读）  会出现幻读
4、Serializable（可串行化）  所有指令串行执行，最安全但是效率太低了


B树
B树解决了平衡二叉树的高度过高问题，B树是N叉树(节点最大数量叫阶)，每个节点可以存放多个元素，因此存放相同数据量的情况下，高度会比普通二叉树低很多，
可以大大减少磁盘的IO次数，B树的每一个节点称为页，mysql读取的基本单元是页，也就是磁盘块
结构特点：以三叉树为例
节点有三个指针，左指针指向块的元素都小于当前节点的最小元素值，中间的指针指向介于当前节点元素值之间的块，右边指针指向大于当前节点最大元素值
缺点：只能做到高效的单点查询，对范围查找效率低，需要中序遍历

B+树
是B树的升级版本，非叶子节点不存储数据，只作索引，叶子节点存储数据，且用双向链表连接起来，树节点做了冗余，相比于B树既能支持高效的区间查询，插入
和删除都比B树更加出色(直接从叶子节点删除就行)
而且非叶子节点不存储数据，一个磁盘块可以存储更多的元素，整体的高度比B树矮


存储引擎：指的是表组织数据的方式，可以在创建表的时候指定不同的存储引擎
InnoDB:支持事务，安全性高。
支持数据库奔溃后自动恢复
相对于Myism  不能很好节省空间，不能压缩数据
支持行级锁
每个innoDB表在数据库目录中以.frm格式文件表示
innoDB 表空间tablespace被用于存储表的内容(表空间是一个逻辑名称，表空间存储数据+索引,.frm文件用来存储表的格式)
InnoDB 是以页为单位管理存储空间的，聚簇索引和其他的二级索引都是以B+树的形式保存到表空间的，而B+树的节点就是数据页.