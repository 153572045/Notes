TCP(传输控制协议)


握手过程：(请求 → 应答 → 应答之应答)
双方的初始状态都为CLOSED,当服务端开始提供服务，即主动监听某个端口，进入LISTEN状态
(1)、客户端发送一个报文，报文的SYN标志位为1，同时携带了初始序列号，之后客户端处于SYN-SENT状态
(2)、服务端收到报文后，发了一个SYN和ACK标志位都为1的报文，同时携带了初始序列号和确认序列号，进入SYN-RCVD状态
(3)、客户端发送一个ACK标志为1的确认报文，携带了确认序列号，之后客户端进入ESTABLISHED状态，服务端收到报文后也转到ESTABLISHED状态，连接建立
若客户端和服务端的初始序号分别为 x,y  则连接后双方的当前序号分别为x+1,y+1，分别作为下一个包的序号

为什么握手是三次
TCP为了保证其消息的可靠性，需要有ACK确认机制，因此，对于每一个SYN包，至少要对应一次确认包，如果减少为两次握手，那么服务端将收不到客户端对其SYN包
的确认，无法确认客户端是否收到其SYN+ACK包，如果增加握手次数，如四次，那么又增加了握手的通信次数，效率会降低，而且，TCP本来为了减少连接建立的通信次
数，就已经将服务端的SYN和ACK进行了合并，所以三次握手的设计比较合理。

2、断开连接

(1)、由某端，比如客户端先发FIN包准备断开连接，也会携带seq, 之后客户端进入FIN-WAIT1状态
(2)、服务端收到FIN包后发送ACK包确认收到，之后进入CLOSED-WAIT状态，之后进行一些断开的准备工作，客户端收到ACK后进入FIN-WAIT2状态
(3)、准备工作做完后服务端会发送一个FIN、ACK包(也会携带确认序号),请求断开连接，状态变为LAST-ACK状态。
(4)、客服端收到包后状态变为TIME-WAIT，之后发送一个ACK包确认，为了安全和稳定，客户端发送ACK包后会维持在TIME-WAIT状态2MSL，最终进入CLOSED状态
服务端收到ACK包后也进入CLOSED状态



------------------------------------------------------------------------------------------------------------------------

如何解决TCP丢包的问题
TCP协议丢包后，如何解决丢包的问题
为了满足TCP协议不丢包。TCP协议有如下规定：
数据分片：发送端对数据进行分片，接受端要对数据进行重组，由TCP确定分片的大小并控制分片和重组
到达确认：接收端接收到分片数据时，根据分片数据序号向发送端发送一个确认
超时重发：发送方在发送分片时设置超时定时器，如果在定时器超时之后没有收到相应的确认，重发分片数据
滑动窗口：TCP连接的每一方的接受缓冲空间大小固定，接收端只允许另一端发送接收端缓冲区所能接纳的数据，TCP在滑动窗口的基础上提供流量控制，防止较快主机致
使较慢主机的缓冲区溢出
失序处理：作为IP数据报来传输的TCP分片到达时可能会失序，TCP将对收到的数据进行重新排序，将收到的数据以正确的顺序交给应用层;
重复处理：作为IP数据报来传输的TCP分片会发生重复，TCP的接收端必须丢弃重复的数据;
数据校验：TCP将保持它首部和数据的检验和，这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到分片的检验或有差错，TCP将丢弃这个分
片，并不确认收到此报文段导致对端超时并重发

面试问题：TCP怎么保证可靠安全的通信

首先TCP通过序号去保证数据能够被接收方正确处理，不会出现乱序的情况，通过确认序号保证不会丢包，如果发送方没收到确认包的话会进行超时重发，接收方如果收到
重复的包会丢掉。
此外还有数据校验，滑动窗口等一些机制，数据校验可以检查数据在传输的过程中是否有变化，如果有变化该包会被丢弃，滑动窗口则可以控制流量的速度，防止较慢的主
机缓冲区溢出

------------------------------------------------------------------------------------------------------------------------
UDP 报文的具体格式如下：
源端口( 2 字节) + 目的端口( 2 字节) + 长度( 2 字节) + 检验和( 2 字节) + 数据

无连接的通信，是一个无状态的传输协议，不需要三次握手
UDP 客户端在发送数据时并不判断主机是否可达，服务器是否开启等问题，同样它不能确定数据是否成功送达服务器。它只是将数据简单的封
了一个包，之后就丢出去了，不会对数据进行拆分和拼接。
发出去之后也没有确认机制，所以是不安全的传输协议
不进行流量控制和阻塞控制    TCP会根据网络状况调节传输的速率，防止丢包
面向报文  TCP面向字节流
适合实时应用，电话 直播等   TCP适合需要可靠传输的运用
首部开销较小

