
资料：https://juejin.cn/post/6844903889678893063#heading-8
     https://juejin.cn/post/6983213662383112206

一、使用线程池的原因
1、降低资源的消耗：线程池可以重复利用线程，减少了频繁创建或销毁线程的开销
2、提高响应速度：一个任务到达时，不需要等待线程的创建，可以直接使用已有的线程
3、提高线程的可管理性
------------------------------------------------------------------------------------------------------------------------
二、线程池的构造函数即其参数意义

public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize,long keepAliveTime,TimeUnit unit,
   BlockingQueue<Runnable> workQueue,
   ThreadFactory threadFactory,
   RejectedExecutionHandler handler)
几个核心参数的作用：
corePoolSize： 线程池核心线程数最大值
maximumPoolSize： 线程池最大线程数大小
keepAliveTime： 线程池中非核心线程空闲的存活时间大小
unit： 线程空闲存活时间单位
workQueue： 存放任务的阻塞队列
threadFactory： 用于设置创建线程的工厂，可以给创建的线程设置有意义的名字，可方便排查问题。
handler：  线城池的饱和策略事件，主要有四种类型。
------------------------------------------------------------------------------------------------------------------------
三、四种拒绝策略

AbortPolicy(抛出一个异常，默认的)
DiscardPolicy(直接丢弃任务)
DiscardOldestPolicy（丢弃队列里最老的任务，将当前这个任务继续提交给线程池）
CallerRunsPolicy（交给线程池调用所在的线程进行处理)
------------------------------------------------------------------------------------------------------------------------
四、线程池的异常处理
在使用线程池处理任务的时候，任务代码可能抛出RuntimeException，抛出异常后，线程池可能捕获它(在runWorker方法中进行捕获)
也可能创建一个新的线程来代替异常的线程，我们可能无法感知任务出现了异常，因此我们需要考虑线程池异常情况。
处理线程池异常的方式主要有以下4种：
1、在任务代码中加入try/catch结构进行捕获。
2、使用submit()方法,如果任务代码出现异常，如果调用返回的Future对象的get()方法可以进行捕获。
3、自定义创建线程的工厂类，然后给生产的线程设置UncaughtExceptionHandler(异常处理器)。
4、自定义ThreadPoolExecutor，然后重写afterExecute方法也可以对异常进行处理。
------------------------------------------------------------------------------------------------------------------------
五、线程池的状态
1、RUNNING  运行状态，可以接受新任务并处理阻塞队列中的任务
2、SHUTDOWN  调用shutdown()方法后进入SHUTDOWN状态，不接受新任务，但仍然会处理阻塞队列中的任务，全部任务执行完毕后进入TIDYING状态
3、STOP      调用shutdownNow()方法后进入STOP状态，不接受新任务，也不会处理阻塞队列中的任务，而且会轮询正在执行中的任务调用interrupt()方法
             若任务没法响应中断，那么会执行到结束为止，当全部任务结束，进入TIDYING状态
4、TIDYING   该状态表明所有的任务已经运行终止，记录的任务数量为0，调用terminated()执行完毕
5、TERMINATED  该状态表示线程池彻底终止
------------------------------------------------------------------------------------------------------------------------
六、线程池源码解析
https://juejin.cn/post/6983213662383112206

1、重要变量  ctl:通过一些巧妙的位运算，将32位的int拆分成了高3位和低29位(待研究)，用来计算线程池的状态和线程个数
        workerCountOf(c) 可以获取线程个数 | runStateOf(c) 可以获取线程池的状态

2、execute()方法：
该方法可以概括为三步：
(1)先调用workerCountOf(c)获取当前线程数，若小于核心线程数，则调用addWorker(command, true)构建一个Worker运行任务
(2)当前线程数大于最大核心线程数，则判断一下线程池的状态后加入阻塞队列
(3)调用addWorker(command, true)构建非核心线程去执行任务，如果失败(超过最大线程数)，则调用reject()方法执行饱和策略

3、addWorker(Runnable firstTask, boolean core)方法
(1)首先会判断一下线程池的状态，然后根据core判断是否在创建核心线程，若超过相应的最大值则返回false
(2)new 一个Worker然后加入HashSet<Worker> workers中，然后调用worker.thread.start()
关于Worker：
即实现了AQS又实现了Runnable,内部包含了thread属性和firstTask(Runnable)属性，Thread是由工厂方法创建的(以自身Worker为参数构建Thread)，
Worker的run()方法调用了线程池的runWorker(Worker w)方法。
具体的运作是runWorker方法内部有一个while循环，如果本身的firstTask不为空，那么执行，否则不断从阻塞队列从获取任务进行执行，如果当前线程池的线程数超过
最大核心线程数，那么会调用超时的Poll方法从阻塞队列中获取任务，超时还没拿到任务时就会返回null，进而退出run方法，线程被撤销，否则一直处于循环执行状态。


总结起来：线程池中的线程任务都是Worker，而不是我们提供的Runnable对象，这些Worker有固定的一个run方法，这个方法在执行完我们创建它时丢给它的任务之后
会不断轮询获取阻塞队列中的任务，因此只要不超时就不会退出run方法，该线程也不会被撤销。
------------------------------------------------------------------------------------------------------------------------
七、其他问题

1、调用shutdown方法后，会对空闲的线程执行interrupt()方法，但是仍处于运行状态的线程之后还会去运行阻塞队列中的线程

几种常见线程池
newFixedThreadPool (固定数目线程的线程池)  核心线程数等于最大线程数，即没有非核心线程，阻塞队列用的无界的LinkedBlockingQueue,因此有可能OOM
newCachedThreadPool(可缓存线程的线程池)    核心线程数是0， 阻塞队列用SynchronousQueue，offer调用总会返回false 所以每次都会new一个worker
                                        当任务过多会产生过多的线程，耗尽cpu资源
newSingleThreadExecutor(单线程的线程池)
newScheduledThreadPool(定时及周期执行的线程池)

阻塞队列SynchronousQueue：不存放元素，put一个元素会阻塞等待take操作.