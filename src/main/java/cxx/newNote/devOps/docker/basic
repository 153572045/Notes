
Docker三要素：
1、镜像——只读的模板，相当于一个root文件系统，由源代码，第三方依赖，配置环境打包而成(可类比为一个类，可以用来创建容器实例)
2、容器——镜像的实例，也叫容器实例(可类比为一个类对象)，应用程序或服务运行在容器中，容器就类似于一个虚拟化的运行环境，每个容器都是相互隔离的，也就是说，
可以把容器看作是一个简易版的Linux环境和运行在其中的应用程序
3、仓库——镜像仓库   官方的公开库为Docker Hub

Docker是一个容器运行载体或管理引擎，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(镜像文件)，之后需要这个服务的时候，就可以通过docker
客户端创建一个容器实例。
架构：Docker是一个C/S结构的系统，Docker守护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器，可以
类比于Mysql,我们可以用客户端(navicat)连接运行在后台的mysql守护进程，后台的守护进程接受到客户端的发出的命令后再去进行操作数据。


Docker命令
一、帮助启动类命令
启动 | systemctl start docker
停止 | systemctl stop docker
重启 | systemctl restart docker
查看docker状态 | systemctl status docker
开机启动 | systemctl enable docker   配置后Linux一开机就自动启动docker
取消开机启动  |  systemctl disable docker
查看docker概要信息 | docker info

二、镜像命令
docker images [-a/-q] | 列出本地镜像[包括历史/只列镜像id]     TAG为镜像的版本号  如果不指定则默认使用最新版本 latest,如 ubuntu:latest
docker search [--limit 5] 镜像名称  | 查找远程库中的镜像[limit可以限制返回个数] OFFICIAL表示官方认证
docker pull 镜像名称[:TAG] | 从远程库拉镜像
docker system df | 查看镜像/容器/数据卷所占用的空间，类似linux中的df -h
docker rmi [-f] 镜像名称/镜像id | 删除镜像[强制]   镜像名称可以多个，空格隔开
docker rmi -f ${docker images -qa} 强制删除所有镜像  ${}为另一个执行命令


三、容器命令
docker run 镜像名称 |  运行容器——先从本地镜像库搜，如果找到镜像文件则产生容器实例，否则就去Docker Hub上找，找得到则实例化容器，否则报错
docker run -it [--name=abc] 镜像名称 | 启动交互式容器(前台命令行)   i代表交互，t代表终端,
如果镜像为ubuntu,进入伪终端后输入exit则退出,容器会停止如果用ctrl+p+q则退出伪终端但容器不停止
docker ps [-a/-q] | 显示所有运行中的容器 加-a表示历史  ps后加-n 2 表示返回最近两个容器  包括已经停止的
docker restart 容器ID/名 | 重启容器
docker stop 容器ID/名 | 停止容器
docker kill 容器ID/名 | 强制停止容器
docker rm [-f] 容器id | 删除已经停止的容器,加-f可以删除还在运行的容器

docker run -d 容器名 | 和-it相对应，启动守护式容器(后台服务器，像redis进行后台启动一样)
后台运行的容器必须有一个前台进程(redis后台启动后会有一个前台进程，所以不会退出)，否则会直接退出，如ubuntu，这样的容器要用-it

docker run -d -p 8080:8080 容器名 -p后面是端口映射

docker logs 容器ID | 看容器上打印的日志
docker top 容器ID | 查看容器内进程  因为每个容器都是一个微型Linux
docker inspect 容器ID | 查看容器内部细节
docker exec -it 容器ID /bin/bash | 重新进入退出来的容器(ctrl + p + q)  这个命令重新进入容器后执行exit  不会停止容器
docker attach 容器ID |  和exec类似  但是进去后执行exit会停止容器

使用redis：
docker run -d redis 后  再执行 redis-cli -p 6379

备份：
docker cp 容器ID:容器内路径 目的主机路径 | 复制文件到宿主机   exa docker cp 123456:usr/local/mycptest/contain.txt /tmp/c.txt
1、docker export 容器ID > 文件名字.tar
2、cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号
先执行1，再执行2，之后可以会生成一个镜像文件，docker images查看  镜像用户/镜像名:镜像版本号可以乱填

commit: docker生成镜像文件
原生的ubuntu容器没有vim,下载命令为：
apt-get undate
apt-get install vim
docker commit -m="描述信息" -a="作者" 容器ID 目标镜像名称[:标签名]
exam : docker commit -m="vim cmd add ok" -a="zzyy" abcdefg cxx/myubuntu:1.0
docker的镜像是一层层堆叠的，就像java的类继承一样

容器数据卷————容器内的数据 备份+持久化到宿主机的本地目录(磁盘)中，有点类似redis中的aof或rdb文件
https://blog.csdn.net/weixin_45842494/article/details/123098436
概念：卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或
共享数据的特征。
卷的设计目的就是数据的持久化和数据共享，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷
注：如果不使用数据卷，使用commit可以将数据持久化成镜像的一部分(待验证)
docker run -it --privileged=true -v /宿主机绝对路径目录：/容器内目录[:ro] 镜像名     |  --privileged=true是用来打开宿主机的权限？ [:r o]限制容器只读不能写
特点
1、数据卷可在容器之间共享或重用数据
2、卷中的更改可以直接实时生效
3、数据卷中的更改不会包含在镜像的更新中
4、数据卷的生命周期一直持续到没有容器使用它为止
docker inspect 容器ID | 查看容器的元信息  里面的Mounts字段可以查看数据卷的挂载信息
如果-v后面只写一个路径  就省略了宿主机的路径，会分配到一个默认地址
Dockerfile的挂载：使用VOLUME关键字  如VOLUME ["/volume1","/volume2"]  这样就产生了两个数据卷，省略了宿主机的地址
容器间的继承：
docker run -it --privileged=true --volumes-from u1 --name u2 ubuntu  | u2继承u1的挂载信息

DockerFile
概念：用来构建Docker镜像的文件，就是一条条构建镜像所需的指令和参数构成的脚本
在docker hub上拉镜像  其实上面就是定义了一个dockerFile,拉的过程应该就是在执行一个dockerfile
基础知识：
1、每条保留字指令都必须是大写字母，后面至少要有一个参数
2、指令按顺序执行
3、每条指令都会创建一个新的镜像层并对镜像进行提交
Docker运行DockerFile的原理：
1、docker从基础镜像运行一个容器
2、执行后续的命令对容器做出修改
3、执行类似commit的操作提交一个新的镜像层
4、docker基于刚才提交的镜像运行一个新的容器
5、重复上面过程直到指令执行完成
常用保留字
FROM: 出现在dockerFile的第一条指令，当前镜像的基础镜像
MAINTAINER:镜像的维护者姓名和邮箱
RUN:镜像构建的时候会执行的命令，RUN <命令> 等同于在容器终端操作shell命令,(有shell和exec两种格式，多用shell)例子： RUN yum -y install vim
RUN在docker build的时候运行
EXPOSE:当前容器对外暴露的端口
WORKDIR:指定在创建容器后，终端默认登录进来的工作目录
USER:指定该镜像以什么样的用户去执行，如果都不指定，默认是root
ENV:用来在构建镜像的过程中设置环境变量  如ENV MY_PATH /usr/mytest  之后的命令可以使用这个环境变量  如：WORKDIR $MY_PATH
VOLUME:容器数据卷，如：VOLUME ["/volume1","/volume2"]  这样就产生了两个数据卷，省略了宿主机的地址
COPY:将宿主机目录下的文件拷贝进镜像
ADD:将宿主机目录下的文件拷贝进镜像且会自动处理url和解压tar解压包  相当于COPY + 解压
CMD:指定容器启动后要干的事情
CMD指令格式也有shell和exec两种，一般用exec  CMD["可执行文件","参数1","参数2",...]  如果配合ENTRYPOINT使用的话，在指定了ENTRYPOINT后，
用CMD进行传参，即CMD["参数1","参数2",...]。DockerFile中可以有多个CMD指令，但是只有最有一个生效，且CMD会被docker run 之后的参数替换掉
例子：tomcat的dockerFile最后的命令是CMD["catalina.sh","run"] 在启动tomcat的时候 如果后面加了/bash/bin  则变成CMD["/bash/bin","run"],
这样容器虽然启动，但是服务没启动。CMD和RUN的区别是RUN是在docker build时运行，而CMD是在docker run时运行
ENTRYPOINT:也是用来指定一个容器启动时要运行的命令，但是该指令不会被docker run后面的命令覆盖掉，而且这些命令行参数会被当做参数传送给ENTRYPOINT
指令指定的程序。
配合CMD使用，例子：
ENTRYPOINT["nginx","-c"] 定参
CMD["/etc/nginx/nginx.conf"]变参    CMD的参数会被传给ENTRYPOINT
run完后相当于执行了  nginx -c /etc/nginx/nginx.conf,run后面的参数会替换掉CMD的参数

编写好dockerFile文件后，在当前目录下执行命令：
docker build -t 镜像名:tag   开始构建镜像


Docker-Compose
概念：容器编排，是官方提供的开源项目，负责实现对docker集群的快速编排  可以类比于spring管理bean对象，compose是管理容器
定义一个yaml格式的配置文件，docker-compose.yml,写好多个容器之间的调用关系，之后执行命令，就能同时启动/关闭这些容器  实现一键部署
即compose让用户通过一个单独的yml文件来定义一组相关联的应用容器为一个项目(Project)
工程=多个服务(容器实例)，docker-compose.yml就定义了一个工程，对于暴露了一个完整业务单元(微服务，redis、mysql、kafka等)
docker-compose up | 执行docker.compose文件，即启动整个应用程序，完全一键部署
常用命令(其余去查)
docker-compose up -d 启动所有docker-compose服务并后台运行
docker-compose down 停止并删除容器、卷、网络、镜像
docker-compose ps  展示compose编排过的运行的所有容器
docker-compose restart/start/stop
docker-compose config 检查配置
docker-compose config -q 可以检查yml文件编写有没有出错





镜像加速器配置---阿里云
访问阿里云-->容器镜像服务-->镜像工具-->镜像加速器-->复制加速器地址-->配置到docker desktop中的偏好-->Docker Engineer-->在experimental
下面增加以下内容：
"registry-mirrors": [
"你的专属阿里云镜像加速器地址"
]

将镜像发布到阿里云
访问阿里云-->容器镜像服务-->个人实例-->可以创建新的命名空间或用之前的命名空间-->镜像仓库-->创建镜像仓库-->复制相应指令进行推拉


